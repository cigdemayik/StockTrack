// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockTrack.DataAccess.Concrete.EfCore.Context;

namespace StockTrack.DataAccess.Migrations
{
    [DbContext(typeof(StoctTrackContext))]
    [Migration("20240928222137_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("StockTrack.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = false,
                            Name = "A Product",
                            Quantity = 0
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            Name = "B Product",
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("StockTrack.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = false,
                            Password = "12345",
                            UserName = "selen"
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            Password = "12345",
                            UserName = "alp"
                        });
                });

            modelBuilder.Entity("StockTrack.Entities.Concrete.UserProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProduct");
                });

            modelBuilder.Entity("StockTrack.Entities.Concrete.UserProductHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Operation")
                        .HasColumnType("int");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProductId");

                    b.ToTable("UserProductHistory");
                });

            modelBuilder.Entity("StockTrack.Entities.Concrete.UserProduct", b =>
                {
                    b.HasOne("StockTrack.Entities.Concrete.Product", "Product")
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockTrack.Entities.Concrete.User", "User")
                        .WithMany("UserProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockTrack.Entities.Concrete.UserProductHistory", b =>
                {
                    b.HasOne("StockTrack.Entities.Concrete.UserProduct", "UserProduct")
                        .WithMany("UserProductHistories")
                        .HasForeignKey("UserProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProduct");
                });

            modelBuilder.Entity("StockTrack.Entities.Concrete.Product", b =>
                {
                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("StockTrack.Entities.Concrete.User", b =>
                {
                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("StockTrack.Entities.Concrete.UserProduct", b =>
                {
                    b.Navigation("UserProductHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
